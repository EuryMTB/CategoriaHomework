@rendermode InteractiveServer
@attribute [StreamRendering]
@page "/productos"
@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize] *@

<h3>Productos</h3>
@if (ShowForm)
{
	@* Formularion de accion*@
	<div class="card">
		<h5 class="card-header">@Accion producto</h5>
		<div class="card-body">
			<div class="mb-3">
				<label for="nombre" class="form-label">Nombre</label>
				<input @bind-value="MiProducto.Nombre" type="text" class="form-control" id="nombre" placeholder="Nombre" disabled="@DisableInputs">
			</div>
			<div class="mb-3">
				<label for="descripcion" class="form-label">Descripción</label>
				<textarea @bind="MiProducto.Descripcion" class="form-control" id="descripcion" rows="3" disabled="@DisableInputs"></textarea>
			</div>
			<div class="mb-3">
				<label for="price" class="form-label">Price</label>
				<input type="number" @bind-value="MiProducto.Precio" class="form-control" id="price" rows="3" disabled="@DisableInputs"></input>
			</div>

			<div class="mb-3">
				<label for="categoria" class="form-label">Categoría</label>
				<select @bind="@MiProducto.Categoria.Id" class="form-select form-select-lg mb-3" id="categoria" disabled="@DisableInputs">
					<option disabled>Selecciona una categoría</option>
					@foreach (var c in Categorias)
					{
						<option value="@c.Id">@c.Descripcion</option>
					}
				</select>
			</div>

			@if (Accion != Constants.Acciones.Ver)
			{
				<span class="btn btn-primary" @onclick="Aceptar">Aceptar</span>
			}
			<span class="btn btn-danger" @onclick="btnCancelarClick">@(Accion != Constants.Acciones.Ver ? "Cancelar" : "Salir")</span>

		</div>
	</div>

}
else
{
	@if (ProductoList != null)
	{
		@* Formularion de los registros*@
		<div class="card mb-3 mt-3">
			<div class="card-header">
				<span class="btn btn-success" @onclick="btnAgregarClick">+</span>
			</div>
			<div class="card-body">
				<table class="table">
					<thead>
						<tr>
							<th scope="col">#</th>
							<th scope="col">Nombre</th>
							<th scope="col">Price</th>
							<th scope="col">Category</th>
							<th scope="col">Acciones</th>
						</tr>
					</thead>
					<tbody>
						@if (ProductoList.Count > 0)
						{
							<Virtualize Items="ProductoList" Context="p">
								<tr @key="p.Id">
									<th scope="row">@p.Id</th>
									<td>@p.Nombre</td>
									<td>@p.Precio</td>
									<td>@p.Categoria.Descripcion</td>
									<td>
										<div class="btn-group" role="group" aria-label="Basic mixed styles example">
											<span @onclick="()=>btnEditarClick(p)" class="btn btn-outline-warning">Editar</span>
											<span @onclick="()=>btnEliminarClick(p)" class="btn btn-outline-danger">Eliminar</span>
											<span @onclick="()=>btnVerClick(p)" class="btn btn-outline-primary">Ver</span>
										</div>
									</td>
								</tr>
							</Virtualize>
						}
					</tbody>
				</table>
			</div>
		</div>
	}
	else
	{
		<p>Cargando...</p>
	}
}

@code {



	#region Propiedades del componente Index.Razor

	public string Accion { get; set; } = "Registrar";
	public ProductoRequest MiProducto { get; set; } = new() { Categoria = new CategoriaDto() };

	public List<ProductoDto>? ProductoList { get; set; } = new List<ProductoDto>();
	bool ShowForm = false, DisableInputs = false;

	public int TEST { get; set; } = 1;


	public List<CategoriaDto> Categorias { get; set; } = new List<CategoriaDto>();

	#endregion Propiedades del componente Index.Razor

	#region Metodos del ciclo de vida de la aplicacion (para este componente)
	protected override async Task OnInitializedAsync()
	{
		await Consultar();

		//CATEGORIAS

		var catR = await catService.Get();
		if (catR.Succesd)
		{
			Categorias = catR.Data?.ToList() ?? new List<CategoriaDto>();
			
		}
		MiProducto = new() { Categoria = Categorias[0], Nombre = "ND" };

		//CATEGORIAS


	}
	#endregion Metodos del ciclo de vida de la aplicacion (para este componente)

	#region Eventos
	public void btnAgregarClick()
	{
		Accion = Constants.Acciones.Registrar;
		ShowForm = true;
		StateHasChanged();
		DisableInputs = false;
	}
	public void btnEditarClick(ProductoDto dto)
	{
		Accion = Constants.Acciones.Modificar;
		ShowForm = true;
		DisableInputs = false;
		MiProducto = dto.ToRequest();
	}
	public void btnEliminarClick(ProductoDto dto)
	{
		Accion = Constants.Acciones.Eliminar;
		ShowForm = true;
		DisableInputs = true;
		MiProducto = dto.ToRequest();
	}
	public void btnVerClick(ProductoDto dto)
	{
		Accion = Constants.Acciones.Ver;
		ShowForm = true;
		DisableInputs = true;
		MiProducto = dto.ToRequest();
	}
	public void btnCancelarClick()
	{
		Limpiar();
	}
	#endregion Eventos

	#region Métodos
	async Task Consultar()
	{
		var result = await service.Get();
		if (result.Succesd)
		{
			ProductoList =
			result.Data?.ToList()
			??
			new List<ProductoDto>();
		}

	}
	public void Limpiar()
	{
		ShowForm = false;
		MiProducto = new() { Categoria = Categorias[0], Nombre = "ND" };
	}
	public async Task Aceptar()
	{
		Result r =
		Accion == Constants.Acciones.Registrar ? await service.Create(MiProducto) :
		Accion == Constants.Acciones.Modificar ? await service.Update(MiProducto) :
		Accion == Constants.Acciones.Eliminar ? await service.Delete(MiProducto.Id) :
		Accion == Constants.Acciones.Ver ? Result.Success("") :
		Result.Failure("Accion no soportada");
		if (r.Succesd)
		{
			await Consultar();
			Limpiar();
		}
	}
	#endregion Métodos
}
